<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[香蕉船的博客]]></title>
  <subtitle><![CDATA[天赋不够，汗水来凑]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://hugzh.github.io/"/>
  <updated>2015-08-13T15:28:19.666Z</updated>
  <id>http://hugzh.github.io/</id>
  
  <author>
    <name><![CDATA[Vince]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何使用Cleaver制作html5幻灯]]></title>
    <link href="http://hugzh.github.io/2015/07/07/cleaver-make-ppt/"/>
    <id>http://hugzh.github.io/2015/07/07/cleaver-make-ppt/</id>
    <published>2015-07-07T15:24:02.000Z</published>
    <updated>2015-08-13T15:28:19.666Z</updated>
    <content type="html"><![CDATA[<p>Cleaver是一款基于html5的插件，依赖于Markdown文档格式，可以用来快速地制作幻灯片。这里主要是讲一讲如何安装和使用Cleaver制作炫酷幻灯片。</p>
<h3 id="1-Cleaver安装"><strong>1.Cleaver安装</strong></h3><p>通过nodejs来安装Cleaver，而且只支持Linux系统，windows下暂时不支持。</p>
<p>进入新建好的文件夹demo，使用命令 npm install cleaver -g ，即可安装完成。</p>
<h3 id="2-Cleaver基本使用"><strong>2.<span style="color: #000000;">Cleaver基本使用</span> </strong></h3><p>执行cleaver命令，解析一个markdown文件。用cleaver自带的例子：</p>
<p><code>cleaver node_modules/cleaver/examples/basic.md</code></p>
<p>basic.md的内容是这样的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">title: Basic Example</span><br><span class="line">author:</span><br><span class="line">name: Jordan Scales</span><br><span class="line">twitter: jdan</span><br><span class="line">url: http://jordanscales.com</span><br><span class="line">output: basic.html</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line"></span><br><span class="line"># Cleaver 101</span><br><span class="line">## A first look at quick HTML presentations</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">### A textual example</span><br><span class="line"></span><br><span class="line">Content can be written in **Markdown!** New lines no longer need two angle brackets.</span><br><span class="line"></span><br><span class="line">This will be in a separate paragraph.</span><br><span class="line"></span><br><span class="line">&amp;lt;img src="http://whatismarkdown.com/workspace/img/logo.gif" alt="Drawing" style="width: 150px;"/&amp;gt;</span><br><span class="line"></span><br><span class="line">![markdown-logo](logo.gif)</span><br><span class="line">&amp;lt;img src="logo.gif" /&amp;gt;</span><br><span class="line"></span><br><span class="line">[Here's a link](http://google.com).</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">### A list of things</span><br><span class="line"></span><br><span class="line">* Item 1</span><br><span class="line">* Item B</span><br><span class="line">* Item gamma</span><br><span class="line"></span><br><span class="line">No need for multiple templates! [Another link](http://google.com).</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">### Unicode</span><br><span class="line"></span><br><span class="line">* 林花謝了春紅 太匆匆</span><br><span class="line">* 胭脂淚 留人醉 幾時重</span><br><span class="line">* Matching Pairs «»‹› “”‘’「」〈〉《》〔〕</span><br><span class="line">* Greek αβγδ εζηθ ικλμ νξοπ ρςτυ φχψω</span><br><span class="line">* currency ¤ $ ¢ € ₠ £ ¥</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">### A code example</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">// cool looking code</span><br><span class="line">var func = function (arg1) &#123;</span><br><span class="line">return function (arg2) &#123;</span><br><span class="line">return "arg1: " + arg1 + "arg2: " + arg2;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(func(1)(2)); // result is threeAnd here is some `inline code` to check out.</span><br></pre></td></tr></table></figure>
<p>&nbsp;</p>
<p>然后打开该目录下的basic.html即可查看幻灯</p>
<p><a href="http://bloghugzh-wordpress.stor.sinaapp.com/uploads/2015/07/cleaver-firefox.png" target="_blank" rel="external"><img src="http://bloghugzh-wordpress.stor.sinaapp.com/uploads/2015/07/cleaver-firefox-300x217.png" alt="" title="cleaver-firefox"></a></p>
<h3 id="3-简单做一些配置："><strong>3.简单做一些配置：</strong></h3><p>1). title: HTML的标题名</p>
<p>2). author: 作者信息,在最后一页显示</p>
<p>包括下面信息：</p>
<ul>
<li>name: 名字</li>
<li>url: 个人网站</li>
<li>twitter: 微博</li>
<li>email: 邮件地址<br>3). theme: 皮肤(theme: jdan/cleaver-retro)</li>
</ul>
<p>4). style: css样式表(style: css/main.css)</p>
<p>5). output: 生成的HTML文件名(output: basic.html)</p>
<p>6). controls: 控制按钮(controls: true)</p>
<p>7). progress: 顶部显示进程条(progress: true)</p>
<p>8). agenda: 生成一个目录页(progress: false)</p>
<p>9). encoding: 文档的字符编码(encoding: utf-8)</p>
<p>10). template: 设置每张slide的模板(template: template/slide.mustache)</p>
<p>11). layout: 设置HTML模板(template: template/layout.mustache)</p>
<h3 id="4-正文"><strong>4.正文</strong></h3><p>正文必须使用Markdown语法。</p>
<p>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Cleaver是一款基于html5的插件，依赖于Markdown文档格式，可以用来快速地制作幻灯片。这里主要是讲一讲如何安装和使用Cleaver制作炫酷幻灯片。</p>
<h3 id="1-Cleaver安装"><strong>1.Cleaver安装</strong></h]]>
    </summary>
    
      <category term="cleaver" scheme="http://hugzh.github.io/tags/cleaver/"/>
    
      <category term="幻灯" scheme="http://hugzh.github.io/tags/%E5%B9%BB%E7%81%AF/"/>
    
      <category term="Nodejs" scheme="http://hugzh.github.io/categories/Nodejs/"/>
    
      <category term="前端开发" scheme="http://hugzh.github.io/categories/Nodejs/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从AJAX的使用到爬虫友好到SEO优化]]></title>
    <link href="http://hugzh.github.io/2015/05/14/from-ajax-to-seo/"/>
    <id>http://hugzh.github.io/2015/05/14/from-ajax-to-seo/</id>
    <published>2015-05-14T13:26:09.000Z</published>
    <updated>2015-08-13T15:29:12.275Z</updated>
    <content type="html"><![CDATA[<p>&nbsp;</p>
<h1 id="关于Ajax的使用注意">关于Ajax的使用注意</h1><p>最近做爬虫项目的时候发现一个比较值得探讨的问题：由于Ajax的无刷新加载特性，web开发者都比较喜欢使用ajax进行与服务器的数据交互。很多DOM元素都是在基本DOM文档加载完毕之后再进行加载的。这种做法虽然对用户非常友好，但是有时候对于程序（搜索引擎）来说，页面信息获取也会带来一些挑战。</p>
<h2 id="1-_关于异步加载">1.  关于异步加载</h2><p>Ajax的使用是非常广泛的。作为前端开发者，我们往往喜欢JSON数据这种交互模式,所以在渲染页面的时候也倾向于使用ajax从服务器获取JSON数据，从而实现无刷新渲染。这么做对于用户体验肯定是加分的。但是大规模地使用Ajax有时候会使得爬虫很难去获得想要的数据，当然如果我们设计的网站本身就是不想要别人抓取到数据的那就另当别论（除此之外还要加上一些JS动态加载数据以及数据编码等开发方式）。</p>
<p>我们知道，所谓的网络“爬虫” ，就是通过一些http的request模块获取某个URL对应的页面的整个html文档，然后根据一些XPath或者CSS路径语法提取出文档的DOM节点内容，从而获取想要的数据。因此，如果这个页面的重要数据是通过JS执行Ajax来实现的话，就要求爬虫自己去模拟JS事件的触发（这种情况出现最多的就是”load more“这种情景）。甚至有时候如果封装的函数和要传输的参数太过复杂的话，爬虫根本无法通过模拟事件获取最新数据。这样无形之中就会使得爬虫无法抓取更多的网页数据。也就是对爬虫不友好。当然，很多脚本语言已经实现了很多对于事件模拟的模块，但是如果在不是非常必要的情况下，我觉得还是不要滥用Ajax。 那么，爬虫在获取JSON数据的时候具体是怎样工作的呢？我这里举一个处理样例，这个例子是基于Nodejs的Osmosis插件做的爬虫处理。<br>首先  ，我们先来看看这个AJAX的访问url “<a href="http://russia.tv/video/json/menu_id/267?page=4" target="_blank" rel="external">http://russia.tv/video/json/menu_id/267?page=4</a>“ ,访问这个URL得到的数据格式如图：</p>
<p><a href="http://bloghugzh-wordpress.stor.sinaapp.com/uploads/2015/05/捕获.jpg" target="_blank" rel="external"><img src="http://bloghugzh-wordpress.stor.sinaapp.com/uploads/2015/05/捕获-300x89.jpg" alt="" title="捕获JSON"></a></p>
<p>我们需要的仅仅是里面的’url’键对应的值，所以爬虫可以这样去提取数据：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var json_text = JSON.parse(data.json);&#10;// get flower&#10;// &#123;&#34;last_page&#34;:0,&#34;row_list&#34;:[&#123;&#34;url&#34;:&#39;xxxxx&#39;&#125;]&#125;&#10;var urls = [];&#10; _.each(json_text.row_list, function  (url) &#123;&#10;&#10;     urls.push(&#123;&#10;        url: url.url&#10;    &#125;);&#10;&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="2-搜索引擎优化(SEO)">2.搜索引擎优化(SEO)</h2><p>既然聊到了爬虫，那么第二个我想说的问题就是关于SEO。爬虫只是人工搜索数据的一种手段，但是更高级别的大规模数据搜索往往是谷歌百度等搜索引擎。这类的搜索引擎是使用robots来进行数据挖掘的。这就要求前端开发者需要做一些页面优化，使得自己的站点可以更好的被搜索引擎发现。这就是SEO的主要内容，比较简单的SEO方法就是添加meta标签。meta是用来在HTML文档中模拟HTTP协议的响应头报文。META标签是HTML语言HEAD区的一个辅助性标签，它位于HTML文档头部的&lt;HEAD&gt;标记和&lt;TITLE&gt;标记之间，它提供用户不可见的信息。以下是几种meta标签的用法：</p>
<div align="left">1、&lt;meta name=”Generator” content=””&gt;用以说明生成工具（如Microsoft FrontPage 4.0）等；</div><br><div align="left">2、&lt;meta name=”KEYWords”  content=””&gt;向搜索引擎说明你的网页的关键词；</div><br><div align="left">3、&lt;meta name=”DEscription”  content=””&gt;告诉搜索引擎你的站点的主要内容；</div><br><div align="left">4、&lt;meta name=”Author”  content=”你的姓名”&gt;告诉搜索引擎你的站点的制作的作者；</div><br><div align="left">5、&lt;meta name=”Robots”  content= “all|none|index|noindex|follow|nofollow”&gt;</div><br><div align="left">　 其中的属性说明如下：</div><br><div align="left">　 设定为all：文件将被检索，且页面上的链接可以被查询；</div><br><div align="left">   设定为none：文件将不被检索，且页面上的链接不可以被查询；</div><br><div align="left">   设定为index：文件将被检索；</div><br><div align="left">   设定为follow：页面上的链接可以被查询；</div><br><div align="left">   设定为noindex：文件将不被检索，但页面上的链接可以被查询；</div><br><div align="left">   设定为nofollow：文件将不被检索，页面上的链接可以被查询。</div><br><div align="left"> 还有一种比较常见的meta标签是用户社交（<strong>Open Graph Protocol</strong>）。我们可以发现很多网页的head里面包含&lt;meta property=”og:title” content=”xxx”&gt;这样的标签。</div><br><div align="left">Meta Property=og标签是什么呢?og是一种新的HTTP头部标记，即Open Graph Protocol。即这种协议可以让网页成为一个“富媒体对象”。</div>

<p>用了Meta Property=og标签，就是你同意了网页内容可以被其他社会化网站引用等，目前这种协议被SNS网站如Fackbook、renren采用。SNS已经成为网络上的一大热门应用，优质的内容通过分享在好友间迅速传播。为了提高站外内容的传播效率，2010年F8会议上Facebook公布 了一套开放内容协议(Open Graph Protocol)，任何网页只要遵守该协议，SNS就能从页面上提取最有效的信息并呈现给用户。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&nbsp;</p>
<h1 id="关于Ajax的使用注意">关于Ajax的使用注意</h1><p>最近做爬虫项目的时候发现一个比较值得探讨的问题：由于Ajax的无刷新加载特性，web开发者都比较喜欢使用ajax进行与服务器的数据交互。很多DOM元素都是在基本DOM文档加]]>
    </summary>
    
      <category term="SEO" scheme="http://hugzh.github.io/tags/SEO/"/>
    
      <category term="爬虫" scheme="http://hugzh.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="javascript" scheme="http://hugzh.github.io/categories/javascript/"/>
    
      <category term="Nodejs" scheme="http://hugzh.github.io/categories/javascript/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用nodejs做一个新闻网页爬虫——Nodejs初体验]]></title>
    <link href="http://hugzh.github.io/2015/04/16/node-spider/"/>
    <id>http://hugzh.github.io/2015/04/16/node-spider/</id>
    <published>2015-04-16T12:45:12.000Z</published>
    <updated>2015-08-11T06:24:53.346Z</updated>
    <content type="html"><![CDATA[<p>昨天在leader的要求下做了一个小小的作业，作为近期项目的一个入门练习。要写的是一个网页爬虫，使用node来爬取网易新闻页 <a href="http://news.163.com的首页所有的新闻连接，存入urls.txt文件。然后从urls.txt文件中选取一条url进行新闻内容的爬取，存入news.txt文件中。" target="_blank" rel="external">http://news.163.com的首页所有的新闻连接，存入urls.txt文件。然后从urls.txt文件中选取一条url进行新闻内容的爬取，存入news.txt文件中。</a></p>
<p>本来对nodejs的了解仅仅停留在“hello world”的水平，虽然很早就曾打算学习这们传说中无比流弊的语言，无奈最近因为找实习各种事务缠身，始终没时间深入研究node。好在leader给我们的任务恰恰成为我学习node的推动力，哈哈。</p>
<p>回到刚才说的任务，网页爬虫。既然是对网页内容的提取，首先必须得搭建好一个良好的架构。主要是两个方面：一个是对整个页面的爬取，另一个就是对页面关键词的提取。爬取页面肯定要用到node的http模块，在这里我是用了http.get的方法。对于页面元素的提取，我是用了最近刚刚接触过的cheerio这样一个库，这是一个非常轻量型的第三方插件，它的使用语法和jQuery几乎完全一样。比如选择器的语法：</p>
<p>$(selectior,[context],[root])</p>
<p>选择器在 Context 范围内搜索，Context又在Root范围内搜索。selector 和context可是一个字符串表达式，DOM元素，和DOM元素的数组，或者chreeio对象。root 是通常是HTML 文档字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.apple'</span>, <span class="string">'#fruits'</span>).text()</span><br><span class="line"><span class="comment">//=&amp;gt; Apple</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'ul .pear'</span>).attr(<span class="string">'class'</span>)</span><br><span class="line"><span class="comment">//=&amp;gt; pear</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'li[class=orange]'</span>).html()</span><br><span class="line"><span class="comment">//=&amp;gt; &amp;lt;li class="orange"&amp;gt;Orange&amp;lt;/li&amp;gt;</span></span><br></pre></td></tr></table></figure>
<p>又比如获取html元素内容的语法：.text( [textString] )</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.orange'</span>).text()</span><br><span class="line"><span class="comment">//=&amp;gt; Orange</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'ul'</span>).text()</span><br><span class="line"><span class="comment">//=&amp;gt;  Apple</span></span><br><span class="line"><span class="comment">//    Orange</span></span><br><span class="line"><span class="comment">//    Pear&lt;/pre&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面是我整个代码的目录结构</p>
<p><a href="http://bloghugzh-wordpress.stor.sinaapp.com/uploads/2015/04/捕获.jpg" target="_blank" rel="external"><img src="http://bloghugzh-wordpress.stor.sinaapp.com/uploads/2015/04/捕获-300x112.jpg" alt="" title="捕获"></a></p>
<p>其中app.js就是负责爬取新闻列表页的url，而getNew.js是负责对新闻内容的抓取。这个项目的难点就是中文编码的转码问题，由于网易新闻主页的html编码方式是GBK，而Nodejs本身是不支持GBK字符的读写的，所以抓取下来的新闻内容就会出现乱码。这是Nodejs入门的一个经典案例，花了我很长时间来解决。后来查找资料得知使用iconv插件来进行转码，最终解决了这个烦人的问题。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>)</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>)</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*get one url from file urls.txt*/</span></span><br><span class="line">fs.readFile(<span class="string">'urls.txt'</span>,<span class="string">'utf-8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(err);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> urlArray = data.split(<span class="string">'\"&#125;,'</span>);</span><br><span class="line">	<span class="keyword">var</span> urlstr = urlArray[<span class="number">0</span>].split(<span class="string">':\"'</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> url = urlstr[<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">console</span>.log(url);</span><br><span class="line">	http.get(url,<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">		<span class="comment">//this step is very important</span></span><br><span class="line">		<span class="comment">//it change gbk unicode into binary,avoid error</span></span><br><span class="line"></span><br><span class="line">		res.setEncoding(<span class="string">'binary'</span>);</span><br><span class="line">		<span class="keyword">var</span> article = <span class="string">''</span>;</span><br><span class="line">		res.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">			article += data;</span><br><span class="line">		&#125;).on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(article, <span class="string">'binary'</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//decode the content in gbk unicode</span></span><br><span class="line">			<span class="comment">//depend on plus-in iconv</span></span><br><span class="line">			<span class="keyword">var</span> gbkStr = iconv.decode(buf, <span class="string">'GBK'</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">var</span> $ = cheerio.load(gbkStr);</span><br><span class="line">			<span class="keyword">var</span> result = [];</span><br><span class="line">			<span class="keyword">var</span> title = $(<span class="string">'#h1title'</span>).text();</span><br><span class="line">			<span class="keyword">var</span> cont  = <span class="string">''</span>;</span><br><span class="line">			$(<span class="string">'p'</span>,<span class="string">'#endText'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,ele</span>)</span>&#123;</span><br><span class="line">				cont+=$(<span class="keyword">this</span>).text();</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">			result.push(&#123;ArticleTitle:title,ArticleContent:cont&#125;);</span><br><span class="line">			<span class="keyword">var</span> file = <span class="string">'article.txt'</span>;</span><br><span class="line">			fs.writeFile(file,<span class="built_in">JSON</span>.stringify(result),<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(err)&#123;</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"write file failed"</span>+err);</span><br><span class="line">					<span class="keyword">return</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line">		&#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(err);</span><br><span class="line">		&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这就是整个项目的核心代码所在。如果要想查看app.js是如何写的，可以查看我的github地址，<a href="https://github.com/hugzh/node。这里就不贴代码了。" target="_blank" rel="external">https://github.com/hugzh/node。这里就不贴代码了。</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天在leader的要求下做了一个小小的作业，作为近期项目的一个入门练习。要写的是一个网页爬虫，使用node来爬取网易新闻页 <a href="http://news.163.com的首页所有的新闻连接，存入urls.txt文件。然后从urls.txt文件中选取一条url进]]>
    </summary>
    
      <category term="javascript" scheme="http://hugzh.github.io/categories/javascript/"/>
    
      <category term="Nodejs" scheme="http://hugzh.github.io/categories/javascript/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一道经典的Web前端笔试试题——闭包]]></title>
    <link href="http://hugzh.github.io/2015/03/31/one-interview-closure/"/>
    <id>http://hugzh.github.io/2015/03/31/one-interview-closure/</id>
    <published>2015-03-31T14:29:29.000Z</published>
    <updated>2015-08-11T06:23:28.802Z</updated>
    <content type="html"><![CDATA[<p><strong>    先前一直以为自己学了点javascript的DOM操作就以为自己“学会”了JS这门博大精深的语言，其实是自己图样图森破了！！！其实javascript的真正精髓（难点）在于作用域、原型以及闭包这三个方面。这是成为前端高手之前必须要迈过的一道坎</strong>。</p>
<p>首先我们来看看这样一道题：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&amp;lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">a+=i;&#125;,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数咋一看，没什么了不起的嘛。不就是实现从0加到9的和嘛！很简单，就是45。</p>
<p>显然，世界上大多数的事情总是不能按照我们自己编造的剧本发展滴。实际上，这个main函数的返回结果是100！！！Why?这就涉及到我想要讲的闭包问题。</p>
<p>JS的闭包是比较难理解的一个知识点，我到现在也没有完全理解。实际上，在循环内部的每一个函数中都保留着它的外部函数的活动对象，它们都是指向同一个变量i。当外部函数fn()返回后，变量i的值是10，此时每一个函数都保存着变量i的同一个变量对象，所以在每个函数内部的i的值都是10，所以a+=i实际上是等价于a+=10。循环10次之后的结果显然就变成100了！这其实是因为作用域链的配置机制引发的一个副作用，即闭包只能取得包含函数中任何变量的最后一个值。因为闭包所保存的是整个变量对象，而不是某一个特殊值。</p>
<p>那如果我非要实现从0到9相加怎么办呢？咱们可以这样写：[codesyntax lang=”javascript”]</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&amp;lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">a+=num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(i),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//45</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，我们没有直接把闭包放进setTimeout函数，而是定义一个匿名函数，并立即执行该匿名函数的结果返回。匿名函数的参数num也就是最终要返回的值。在调用每个匿名函数的时候，我们传入了变量i。由于变量参数是传值的，所以i会复制一个副本给num参数，这样在匿名函数的内部又返回了一个访问num的闭包。所以，每一个内部函数中都有一个自己的num副本，算出来的结果就是0到9相加了，最后结果为45。</p>
<p>我们再来看一道著名互联网公司的实习招聘题目：</p>
<p><a href="http://bloghugzh-wordpress.stor.sinaapp.com/uploads/2015/03/2.jpg" target="_blank" rel="external"><img src="http://bloghugzh-wordpress.stor.sinaapp.com/uploads/2015/03/2-300x189.jpg" alt="" title="2"></a></p>
<p>这道题的话相对理解起来还是比较容易理解的，如果你搞明白了闭包的含义的话。其实是这样子的：函数a里面有一个匿名函数，这个匿名函数访问了a函数的参数x，形成一个闭包。由于作用域链以及函数声明提前的关系，y函数在代码运行之前就已经预先声明，也就是存在于外部活动变量中，当a函数执行返回的时候，活动变量里面的x值就变成了活动变量里面的X值，即2。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>    先前一直以为自己学了点javascript的DOM操作就以为自己“学会”了JS这门博大精深的语言，其实是自己图样图森破了！！！其实javascript的真正精髓（难点）在于作用域、原型以及闭包这三个方面。这是成为前端高手之前必须要迈过的一道坎</st]]>
    </summary>
    
      <category term="js" scheme="http://hugzh.github.io/tags/js/"/>
    
      <category term="javascript" scheme="http://hugzh.github.io/categories/javascript/"/>
    
      <category term="前端开发" scheme="http://hugzh.github.io/categories/javascript/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML5里的placeholder属性]]></title>
    <link href="http://hugzh.github.io/2015/03/26/html5-placeholder/"/>
    <id>http://hugzh.github.io/2015/03/26/html5-placeholder/</id>
    <published>2015-03-26T15:33:49.000Z</published>
    <updated>2015-08-13T15:31:42.228Z</updated>
    <content type="html"><![CDATA[<p>HTML5里新引入很多有趣的新特征；有些体现在HTML里，有些是JavaScript API，全部非常的有用。其中我最喜欢的一个特征就是文本框(INPUT)里的<span style="color: #ff9900;"><code>placeholder</code></span>属性。<span style="color: #ff9900;"><code>placeholder</code></span>属性能够让你在文本框里显示提示信息，一旦你在文本框里输入了什么信息，提示信息就会隐藏。你以前可能无数次看到这种效果，但那些大部分是用JavaScript里实现的，而现在，HTML5提供了原生支持，而且效果更好！</p>
<h2 id="用法:">用法:</h2><p> 需要做的只是在文本框的声明标签上加入<span style="color: #ff9900;"><code>placeholder</code></span>属性。完全不需要JavaScript来创造这种效果。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;input type=&#34;text&#34; name=&#34;first_name&#34; placeholder=&#34;&#20320;&#30340;&#22995;&#21517;...&#34; /&#62;</span><br></pre></td></tr></table></figure>
<h2 id="检查浏览器是否支持Placeholder属性：">检查浏览器是否支持Placeholder属性：</h2><p>因为<span style="color: #ff9900;"><code>placeholder</code></span>是一种新属性，很有必要检查一下你的浏览器是否支持它，比如IE6、IE8肯定是不支持的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function hasPlaceholderSupport() &#123;</span><br><span class="line">	var input = document.createElement('input');</span><br><span class="line">	return ('placeholder' in input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果用户的浏览器不支持<span style="color: #ff9900;"><code>placeholder</code></span>特征，你需要借助MooTools, Dojo, 或其它JavaScript工具来实现它</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* mootools ftw! */</span><br><span class="line">var firstNameBox = $('first_name'),</span><br><span class="line">	message = firstNameBox.get('placeholder');</span><br><span class="line">firstNameBox.addEvents(&#123;</span><br><span class="line">	focus: function() &#123;</span><br><span class="line">		if(firstNameBox.value == message) &#123; searchBox.value = ''; &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	blur: function() &#123;</span><br><span class="line">		if(firstNameBox.value == '') &#123; searchBox.value = message; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="可以对样式进行CSS美化：">可以对样式进行CSS美化：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="pseudo">::-webkit-input-placeholder</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#f00</span></span></span>; &#125;</span></span><br><span class="line"><span class="pseudo">::-moz-placeholder</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#f00</span></span></span>; &#125;</span> <span class="comment">/* firefox 19+ */</span></span><br><span class="line"><span class="pseudo">:-ms-input-placeholder</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#f00</span></span></span>; &#125;</span> <span class="comment">/* ie */</span></span><br><span class="line"><span class="rule"><span class="attribute">input</span>:<span class="value">-moz-placeholder &#123; color:<span class="hexcolor">#f00</span></span></span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* individual: webkit */</span></span><br><span class="line"><span class="id">#field2</span><span class="pseudo">::-webkit-input-placeholder</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#00f</span></span></span>; &#125;</span></span><br><span class="line"><span class="id">#field3</span><span class="pseudo">::-webkit-input-placeholder</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#090</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value">lightgreen</span></span>; <span class="rule"><span class="attribute">text-transform</span>:<span class="value">uppercase</span></span>; &#125;</span></span><br><span class="line"><span class="id">#field4</span><span class="pseudo">::-webkit-input-placeholder</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-style</span>:<span class="value">italic</span></span>; <span class="rule"><span class="attribute">text-decoration</span>:<span class="value">overline</span></span>; <span class="rule"><span class="attribute">letter-spacing</span>:<span class="value"><span class="number">3px</span></span></span>; <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#999</span></span></span>; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* individual: mozilla */</span></span><br><span class="line"><span class="id">#field2</span><span class="pseudo">::-moz-placeholder</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#00f</span></span></span>; &#125;</span></span><br><span class="line"><span class="id">#field3</span><span class="pseudo">::-moz-placeholder</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#090</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value">lightgreen</span></span>; <span class="rule"><span class="attribute">text-transform</span>:<span class="value">uppercase</span></span>; &#125;</span></span><br><span class="line"><span class="id">#field4</span><span class="pseudo">::-moz-placeholder</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-style</span>:<span class="value">italic</span></span>; <span class="rule"><span class="attribute">text-decoration</span>:<span class="value">overline</span></span>; <span class="rule"><span class="attribute">letter-spacing</span>:<span class="value"><span class="number">3px</span></span></span>; <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#999</span></span></span>; &#125;</span></span><br><span class="line"></span><br><span class="line">##</span><br></pre></td></tr></table></figure>
<p>你可以控制placeholder文字的字体、颜色和风格。你甚至可以将文本框的placeholder以动画方式显示。 美化你的文本框都是些看起来很小的事情，但对于一些交互式的网站来说，成功的关键就在于细节。现在IE10里也只支持placeholder了，相信越来越多的人会使用这种原生的placeholder效果。</p>
<p>(本文转载自 <a href="http://www.webhek.com/html5-placeholder?rel=http://geek.csdn.net" target="_blank" rel="external">http://www.webhek.com/html5-placeholder?rel=http://geek.csdn.net</a>)</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HTML5里新引入很多有趣的新特征；有些体现在HTML里，有些是JavaScript API，全部非常的有用。其中我最喜欢的一个特征就是文本框(INPUT)里的<span style="color: #ff9900;"><code>placeholder</code></s]]>
    </summary>
    
      <category term="css" scheme="http://hugzh.github.io/tags/css/"/>
    
      <category term="html5" scheme="http://hugzh.github.io/tags/html5/"/>
    
      <category term="前端开发" scheme="http://hugzh.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript操作符使用注意事项]]></title>
    <link href="http://hugzh.github.io/2015/03/11/javascript-op/"/>
    <id>http://hugzh.github.io/2015/03/11/javascript-op/</id>
    <published>2015-03-10T16:00:00.000Z</published>
    <updated>2015-08-13T15:33:05.259Z</updated>
    <content type="html"><![CDATA[<p>javascript 的操作符运算中有很多是可以适用于不同类型的值，这是因为javascript本身是一门变量类型松散型的语言，在使用运算符的时候有很多容易出错的地方。加法和减法这两个运算符是各种开发语言中用得最多的运算符了，但是在ECMAScript中，这两个操作符却有一系列特殊行为。</p>
<p>1、加法：<br>如果+号的两个操作数有一个是字符串，那么就有下面的规则：<br>两个操作数都是字符串的时候，那么结果就是两个字符串拼接；<br>只有一个是字符串，那么将另外一个操作数转化为字符串，然后两个字符串拼接<br>如果有一个操作数是对象、数值或者布尔值，则调用它们的toString()方法取得相应的字符串值，再按照上面的规则。</p>
<p>比如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="number">5</span>+<span class="number">5</span>; <span class="comment">//两个数值相加，结果为10</span></span><br><span class="line"><span class="keyword">var</span> res2 = <span class="number">5</span>+“<span class="number">5</span>”; <span class="comment">//一个数值和一个字符串相加，结果为"55"</span></span><br></pre></td></tr></table></figure>
<p>编程中常犯的一个错误就是当我们想要得到相加结果，我们很容易这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">"The sum of 5 and 10 is "</span> + num1 +num2; <span class="comment">//错误结果</span></span><br></pre></td></tr></table></figure>
<p>这样我们得到的结果竟然是“The sum of 5 and 10 is 510”。出现这样的情况就是因为运算规则是从左到右，前面一个加号是字符串和数值相加，根据上面的规则，结果为字符串，然后再进行下一步加法时，还是字符串和数值的相加，结果就会出现上面的错误，正确的写法是将后两个数值相加就和之后再与字符串合并，即：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">"The sum of 5 and 10 is "</span> +（ num1 +num2）; <span class="comment">// The sum of 5 and 10 is 15</span></span><br></pre></td></tr></table></figure>
<p>2、减法：<br>减法和加法类似，但是参数转换略有不同，减法的两个操作数其中一个是字符串、布尔值或者对象的时候，后台调用Number() 函数将其转换为数值再进行减法运算。比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res1 = <span class="number">5</span> - <span class="literal">true</span>; <span class="comment">//4，因为true被转换成1</span></span><br><span class="line"><span class="keyword">var</span> res2 = <span class="number">5</span> - <span class="string">""</span>; <span class="comment">//5，因为""被转化成0</span></span><br><span class="line"><span class="keyword">var</span> res3 = <span class="number">5</span> - <span class="string">"2"</span>; <span class="comment">//3，因为"2"被转化成数值2</span></span><br></pre></td></tr></table></figure>
<p>3、相等操作符：<br>javascript中==和===不一样。前一个是相等操作符，在比较之前会进行类型强制转换，也就是说true==1、null==undefined是成立的。但是后一个操作符是全等操作符，比较之前不会进行类型转换，所以全等的前提是类型和值都相等，关系才成立。</p>
<p>还有很多类似的小细节，使用者在开发过程中一定要注意这些可能造成致命错误的细节。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>javascript 的操作符运算中有很多是可以适用于不同类型的值，这是因为javascript本身是一门变量类型松散型的语言，在使用运算符的时候有很多容易出错的地方。加法和减法这两个运算符是各种开发语言中用得最多的运算符了，但是在ECMAScript中，这两个操作符却有一]]>
    </summary>
    
      <category term="javascript" scheme="http://hugzh.github.io/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动前端框架jQuery Mobile 的介绍（二）]]></title>
    <link href="http://hugzh.github.io/2015/01/29/jmobile-use-2/"/>
    <id>http://hugzh.github.io/2015/01/29/jmobile-use-2/</id>
    <published>2015-01-28T16:00:00.000Z</published>
    <updated>2015-08-13T15:40:16.847Z</updated>
    <content type="html"><![CDATA[<p>上一篇主要是介绍了jMobile框架的基础知识，在这一篇里，我们主要是介绍<br>表单应用以及基于移动端的各种events。</p>
<p>一、表单基础：</p>
<p>在 jQuery Mobile 中，我们可以使用下列表单控件：<br>1、文本输入框<br>2、搜索输入框<br>3、单选按钮<br>4、复选框<br>5、选择菜单<br>6、滑动条<br>7、翻转拨动开关</p>
<p>1~5都是和PC前端的用法一样。其中，滑动条以及翻转拨动按钮是具有移动设备特色的表单。值得注意的是，由于<br>html5的使用，input标签的type值可以是mail、date、search，这是不同于PC端的使用，<br>非常方便。如需让标签和表单元素看起来更适应宽屏，可以用带有data-role=”fieldcontain”<br>属性的<br>div或<br>fieldset元素包围 label/form 元素：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">action</span>=<span class="value">"demoform.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"fieldcontain"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"fname"</span>&gt;</span>姓:<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"fname"</span> <span class="attribute">id</span>=<span class="value">"fname"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"lname"</span>&gt;</span>名:<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"lname"</span> <span class="attribute">id</span>=<span class="value">"lname"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;</p>
<p>为了创建一个可以折叠的表单，可以将表单内容置于带有data-role=”collapsible”</p>
<p>属性的fieldset中。<br>表单滑动条的使用如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"range"</span> <span class="attribute">name</span>=<span class="value">"points"</span> <span class="attribute">id</span>=<span class="value">"points"</span> <span class="attribute">value</span>=<span class="value">"50"</span> <span class="attribute">min</span>=<span class="value">"0"</span> <span class="attribute">max</span>=<span class="value">"100"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;</p>
<p>其中的value属性表示滑动条的默认值，min和max是滑动条的取值范围。如果想要高亮突出<br>显示滑动条的值，添加 data-highlight=”true”。</p>
<p>至于拨动按钮开关，用法如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">name</span>=<span class="value">"switch"</span> <span class="attribute">id</span>=<span class="value">"switch"</span> <span class="attribute">data-role</span>=<span class="value">"slider"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"on"</span>&gt;</span>On<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"off"</span>&gt;</span>Off<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;</p>
<p>可以在option里面添加 “selected” 属性来设置选项中的一个为预选中状态（高亮突出显<br>示状态）。</p>
<p>二、页面事件：</p>
<p>在 jQuery Mobile 中, 使用pageinit 事件来设置代码脚本在DOM元素加载完成后开始<br>执行，所以要在任何新页面加载并创建是执行脚本，就需要绑定pageinit事件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"pageinit"</span>,<span class="string">"#pageone"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>点击事件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="string">"p"</span>).on(<span class="string">"tap"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>长按事件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="string">"p"</span>).on(<span class="string">"taphold"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>滑动事件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//简单滑动</span></span><br><span class="line">$(<span class="string">"p"</span>).on(<span class="string">"swipe"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"span"</span>).text(<span class="string">"Swipe detected!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向左滑动</span></span><br><span class="line">$(<span class="string">"p"</span>).on(<span class="string">"swipeleft"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"You swiped left!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向右滑动</span></span><br><span class="line">$(<span class="string">"p"</span>).on(<span class="string">"swiperight"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"You swiped right!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>滚动屏幕事件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//滚屏开始</span></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"scrollstart"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//滚屏结束</span></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"scrollstop"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>另外，还有页面加载完成、失败、页面切换等事件，如果需要更加详细地了解jMobile的<br>用法，可以登录官方网站(<a href="http://jquerymobile.com/)去了解更多用法。" target="_blank" rel="external">http://jquerymobile.com/)去了解更多用法。</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一篇主要是介绍了jMobile框架的基础知识，在这一篇里，我们主要是介绍<br>表单应用以及基于移动端的各种events。</p>
<p>一、表单基础：</p>
<p>在 jQuery Mobile 中，我们可以使用下列表单控件：<br>1、文本输入框<br>2、搜索输入]]>
    </summary>
    
      <category term="javascript" scheme="http://hugzh.github.io/categories/javascript/"/>
    
      <category term="前端开发" scheme="http://hugzh.github.io/categories/javascript/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动前端框架jQuery Mobile 的介绍（一）]]></title>
    <link href="http://hugzh.github.io/2015/01/28/jmobile-use-1/"/>
    <id>http://hugzh.github.io/2015/01/28/jmobile-use-1/</id>
    <published>2015-01-27T16:00:00.000Z</published>
    <updated>2015-08-13T15:40:55.316Z</updated>
    <content type="html"><![CDATA[<p>简介：<br>jQuery Mobile 是用于创建移动 Web应用的前端开发框架，可以应用于智能手机与平板电脑。是一个比较好用的前端框架。<br>jMobile适用于ios，android，black berry，windows phone等主流移动终端操作系统。</p>
<p>jQuery Mobile 的安装：<br>安装非常简单，就像jQuery的安装一样，可以直接把文件下载到本地，然后再html文件的head标签内引用，也可以直接通过<br>CDN 中加载。需要包含三个文件jquery.mobile.min.css、jquery.js以及jquery.mobile.min.js。由于jMobile是自带一套UI的框架，<br>所以第一个css文件是必须要包含进来的。</p>
<p>一个简单的jMobile页面包括三个部分——header、content和footer。通过data-role来实现，比如:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>头<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>主体<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"footer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>底部<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中，jQuery Mobile 依赖 HTML5 data-* 属性来支持各种 UI 元素、过渡和页面结构：<br>data-role=”page” 是在浏览器中显示的页面。<br>data-role=”header” 是在页面顶部创建的工具条 (通常用于标题或者搜索按钮)<br>data-role=”content” 定义了页面的内容，比如文本， 图片，表单，按钮等。<br>data-role=”footer” 用于创建页面底部工具条。<br>在这些容器中你可以添加任何 HTML 元素 - 段落, 图片, 标题, 列表等。</p>
<p>在页面的切换方式使用data-transition来定义，可以包括从上到下滑动，从左到右滑动，抛出页面，弹窗等多种形式。<br>在导航元素上，data-role=”navbar”加图标data-icon可以实现导航栏。每一个的导航元素可以通过class=”ui-btn-active”<br>来实现按钮激活状态。在布局方面，可以使用网格和可折叠板块来实现复杂布局。如需创建一个可折叠的内容块，需要为<br>容器添加 data-role=”collapsible” 属性。在容器（div）内，添加一个标题元素（H1-H6），后跟您想要进行扩展的 HTML<br>标记：</p>
<p>一个默认展开的折叠板：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"collapsible"</span> <span class="attribute">data-collapsed</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>点击我 - 我可以折叠!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>I'm 现在我默认是展开的。<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&amp;nbsp;</span><br></pre></td></tr></table></figure>
<p>&nbsp;</p>
<p>一个默认折叠的折叠版：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"collapsible"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>点击我 - 我可以折叠!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>我是可折叠的内容。<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div data-role="collapsible">

<p>我是可折叠的内容。</p>
<p></p></div><br>jMobile的列表使用非常有特色。可以在列表中添加图标。默认的列表用法如下：<p></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">data-role</span>=<span class="value">"listview"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>列表项<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>列表项<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>列表项<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>列表样式的圆角和边缘，使用 data-inset=”true” 属性设置<br>列表项也可以转化为列表分割项，用来组织列表，使列表项成组。<br>指定列表分割，给列表项 li 元素添加 data-role=”list-divider” 属性即可。</p>
<p>&nbsp;</p>
<p>jquery Mobile提供一个非常简单的方法，实现客户端搜索功能，筛选列表的选项。只需添加 data-filter=”true” 属性即可:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">data-role</span>=<span class="value">"listview"</span> <span class="attribute">data-filter</span>=<span class="value">"true"</span>&gt;</span><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上的介绍时关于jMobile的最基础用法，我们在下一篇将着重介绍表单基础和事件处理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>简介：<br>jQuery Mobile 是用于创建移动 Web应用的前端开发框架，可以应用于智能手机与平板电脑。是一个比较好用的前端框架。<br>jMobile适用于ios，android，black berry，windows phone等主流移动终端操作系统。</p>]]>
    </summary>
    
      <category term="javascript" scheme="http://hugzh.github.io/categories/javascript/"/>
    
      <category term="前端开发" scheme="http://hugzh.github.io/categories/javascript/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BAT及各大互联网公司2014前端笔试面试题：CSS篇]]></title>
    <link href="http://hugzh.github.io/2014/11/21/bat-interview-css/"/>
    <id>http://hugzh.github.io/2014/11/21/bat-interview-css/</id>
    <published>2014-11-20T16:00:00.000Z</published>
    <updated>2015-08-11T06:22:19.803Z</updated>
    <content type="html"><![CDATA[<p>1.有哪项方式可以对一个DOM设置它的CSS样式？<br>外部样式表，引入一个外部css文件<br>内部样式表，将css代码放在 &lt;head&gt; 标签内部<br>内联样式，将css样式直接定义在 HTML 元素内部<br>2.CSS都有哪些选择器？</p>
<p>派生选择器（用HTML标签申明）<br>id选择器（用DOM的ID申明）<br>类选择器（用一个样式类名申明）<br>属性选择器（用DOM的属性申明，属于CSS2，IE6不支持，不常用，不知道就算了）</p>
<p>除了前3种基本选择器，还有一些扩展选择器，包括</p>
<p>后代选择器（利用空格间隔，比如div .a{ }）<br>群组选择器（利用逗号间隔，比如p,div,#a{ }）</p>
<p>那么问题来了，CSS选择器的优先级是怎么样定义的？</p>
<p>基本原则：</p>
<p>一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。<br>复杂的计算方法：</p>
<p>用1表示派生选择器的优先级<br>用10表示类选择器的优先级<br>用100标示ID选择器的优先级<br>div.test1 .span var 优先级 1+10 +10 +1<br>span#xxx .songs li 优先级1+100 + 10 + 1</p>
<h1 id="xxx_li_优先级_100_+1">xxx li 优先级 100 +1</h1><p>3.CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？</p>
<p>最基本的：<br>设置display属性为none，或者设置visibility属性为hidden</p>
<p>技巧性：<br>设置宽高为0，设置透明度为0，设置z-index位置在-1000<br>4.超链接访问过后hover样式就不出现的问题是什么？如何解决？</p>
<p>答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）<br>5.什么是Css Hack？ie6,7,8的hack分别是什么？</p>
<p>答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。<br>7.行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？</p>
<p>块级元素(block)特性：</p>
<p>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;<br>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;<br>内联元素(inline)特性：<br>和相邻的内联元素在同一行;<br>宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。<br>那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？</p>
<p>答案：&lt;input&gt; 、&lt;img&gt; 、&lt;button&gt; 、&lt;textarea&gt; 、&lt;label&gt;。<br>8.什么是外边距重叠？重叠的结果是什么？<br>答案：<br>外边距重叠就是margin-collapse。<br>在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。</p>
<p>折叠结果遵循下列计算规则：</p>
<p>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。<br>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。<br>两个外边距一正一负时，折叠结果是两者的相加的和。</p>
<p>9.rgba()和opacity的透明效果有什么不同？<br>答案：<br>rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，<br>而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）</p>
<p>10.css中可以让文字在垂直和水平方向上重叠的两个属性是什么？<br>答案：<br>垂直方向：line-height<br>水平方向：letter-spacing</p>
<p>那么问题来了，关于letter-spacing的妙用知道有哪些么？<br>答案:可以用于消除inline-block元素间的换行符空格间隙问题。<br>11.如何垂直居中一个浮动元素？</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 方法一：已知元素的高宽</span><br><span class="line"></span><br><span class="line">#div1&#123;</span><br><span class="line">background-color:#6699FF;</span><br><span class="line">width:200px;</span><br><span class="line">height:200px;</span><br><span class="line"></span><br><span class="line">position: absolute; //父元素需要相对定位</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">margin-top:-100px ; //二分之一的height，width</span><br><span class="line">margin-left: -100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//方法二:未知元素的高宽</span><br><span class="line"></span><br><span class="line">#div1&#123;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 200px;</span><br><span class="line">background-color: #6699FF;</span><br><span class="line"></span><br><span class="line">margin:auto;</span><br><span class="line">position: absolute; //父元素需要相对定位</span><br><span class="line">left: 0;</span><br><span class="line">top: 0;</span><br><span class="line">right: 0;</span><br><span class="line">bottom: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>1.有哪项方式可以对一个DOM设置它的CSS样式？<br>外部样式表，引入一个外部css文件<br>内部样式表，将css代码放在 &lt;head&gt; 标签内部<br>内联样式，将css样式直接定义在 HTML 元素内部<br>2.CSS都有哪些选择器？</p>
<p>]]>
    </summary>
    
      <category term="前端开发" scheme="http://hugzh.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用哈希密码的安全性问题]]></title>
    <link href="http://hugzh.github.io/2014/11/21/problem-of-hash/"/>
    <id>http://hugzh.github.io/2014/11/21/problem-of-hash/</id>
    <published>2014-11-20T16:00:00.000Z</published>
    <updated>2015-08-10T06:00:47.812Z</updated>
    <content type="html"><![CDATA[<p>一、 哈希密码<br>哈希是一种散列函数，就是把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。<br>在密码学当中，HASH主要用于信息安全领域中加密算法，它把一些不同长度的信息转化成杂乱的128位的编码里,叫做HASH值. 也可以说，hash就是找到一种数据内容和数据存放地址之间的映射关系。MD4和MD5是哈希密码的主要算法。</p>
<p>二、 哈希密码的安全隐患<br>哈希函数本来是不可逆的函数，也就是说知道了哈希值也不能使用算法把原文推算出来。但是由于常见字符串的哈希值，可以通过查表的方式找到原文，比如彩虹表等等。所以目前还是存在一些数据库可以查到简单字符串的哈希值的，这样就造成了用哈希函数加密的密文安全性不可靠。</p>
<p>三、 哈希盐值<br>盐值就是程序随机产生的随机字符串组合。<br>加盐后的散列值，可以极大的降低由于用户数据被盗而带来的密码泄漏风险，即使通过彩虹表寻找到了散列后的数值所对应的原始内容，但是由于经过了加盐，插入的字符串扰乱了真正的密码，使得获得真实密码的概率大大降低。那么它的原理是什么呢？<br>查表法和彩虹表只有在所有密码都以相同方式进行哈希加密时才有效。如果两个用户密码相同，那么他们密码的哈希值也是相同的。我们可以通过“随机化”哈希来阻止这类攻击，于是当相同的密码被哈希两次之后，得到的值就不相同了。为了校验密码是否正确，我们需要储存盐值。通常和密码哈希值一起存放在账户数据库中，或者直接存为哈希字符串的一部分。<br>加盐值的时候需要注意以下几点：<br>1、 盐值不能重复。两个相同的密码会得到相同的哈希值。攻击者可以使用反向查表法对每个值进行字典攻击，只需要把盐值应用到每个猜测的密码上再进行哈希即可。如果盐值被硬编码到某个流行的软件里，可以专门为这个软件制作查询表和彩虹表，那么破解它生成的哈希值就变得很简单了。用户创建账户或每次修改密码时，都应该重新生成新的盐值进行加密。<br>2、 盐值不能太短。如果盐值太短，攻击者可以构造一个查询表包含所有可能的盐值。以只有3个ASCII字符的盐值为例，一共有95x95x95=857,375种可能。同样地，用户名也不应该被用作盐值。尽管在一个网站中用户名是唯一的，但是它们是可预测的，并且经常重复用于其他服务中。攻击者可以针对常见用户名构建查询表，然后对用户名盐值哈希发起进攻。<br>为了使攻击者无法构造包含所有可能盐值的查询表，盐值必须足够长。一个好的做法是使用和哈希函数输出的字符串等长的盐值，比如SHA256算法的输出是256bits(32 bytes)，那么盐值也至少应该是32个随机字节。<br>3、 不使用组合哈希。人们经常不由自主地认为将不同的哈希函数组合起来，结果会更加安全。实际上这样做几乎没有好处，仅仅造成了函数之间互相影响的问题，甚至有时候会变得更加不安全。<br>四、哈希加盐存储密码的步骤</p>
<p>存储密码的步骤<br>1. 使用CSPRNG（伪随机数生成器）生成一个长度足够的盐值<br>2. 将盐值混入密码，并使用标准的加密哈希函数进行加密，如MD5<br>3. 把哈希值和盐值一起存入数据库中对应此用户的那条记录<br>校验密码的步骤<br>1. 从数据库取出用户的密码哈希值和对应盐值<br>2. 将盐值混入用户输入的密码，并且使用同样的哈希函数进行加密<br>3. 比较上一步的结果和数据库储存的哈希值是否相同，如果相同那么密码正确，反之密码错误</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一、 哈希密码<br>哈希是一种散列函数，就是把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来]]>
    </summary>
    
      <category term="其它" scheme="http://hugzh.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BAT及各大互联网公司2014前端笔试面试题：HTML篇]]></title>
    <link href="http://hugzh.github.io/2014/10/22/bat-interview-html/"/>
    <id>http://hugzh.github.io/2014/10/22/bat-interview-html/</id>
    <published>2014-10-21T16:00:00.000Z</published>
    <updated>2015-08-10T06:00:47.812Z</updated>
    <content type="html"><![CDATA[<p>1.你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?</p>
<p>IE: trident内核<br>Firefox：gecko 内核<br>Safari:webkit内核<br>Opera:以前是presto内核，Opera现已改用Google Chrome的Blink内核<br>Chrome:Blink(基于webkit，Google与Opera Software共同开发)</p>
<p>2.每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？</p>
<p>答案：声明位于文档中的最前面的位置，处于标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。（重点：告诉浏览器按照何种规范解析页面）</p>
<p>3.Quirks模式是什么？它和Standards模式有什么区别</p>
<p>答案：<br>从IE6开始，引入了Standards模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。</p>
<p>在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差， IE6将对CSS提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如果IE6 支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？</p>
<p>在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能不破坏原有的程序，又提供新功能。IE6也是类似这样做的，它将DTD当成了这个“参数”，因为以前的页面大家都不会去写DTD，所以IE6就假定 如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是Quirks模式（怪癖模式，诡异模式，怪异模式）。</p>
<p>区别：<br>总体会有布局、样式解析和脚本执行三个方面的区别。</p>
<p>盒模型：在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在Quirks 模式下，IE的宽度和高度还包含了padding和border。<br>设置行内元素的高宽：在Standards模式下，给<span>等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。</span></p>
<p>设置百分比的高度：在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的用margin:0 auto设置水平居中：使用margin:0 auto在standards模式下可以使元素水平居中，但在quirks模式下却会失效。<br>4.div+css的布局较table布局有什么优点？</p>
<p>改版的时候更方便 只要改css文件。<br>页面加载速度更快、结构化清晰、页面显示简洁。<br>表现与结构相分离。<br>易于优化（seo）搜索引擎更友好，排名更容易靠前。</p>
<p>5.a：img的alt与title有何异同？b：strong与em的异同？<br>答案：<br>a:<br>alt(alt text):为不能显示图像、窗体或applets的用户代理（UA），alt属性用来指定替换文字。替换文字的语言由lang属性指定。(在IE浏览器下会在没有title时把alt当成 tool tip显示)<br>title(tool tip):该属性为设置该属性的元素提供建议性的信息。<br>b:<br>strong:粗体强调标签，强调，表示内容的重要性<br>em:斜体强调标签，更强烈强调，表示内容的强调点<br>6.你能描述一下渐进增强和优雅降级之间的不同吗?</p>
<p>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。<br>优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>
<p>区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。</p>
<p>“优雅降级”观点</p>
<p>“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。</p>
<p>在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>
<p>“渐进增强”观点</p>
<p>“渐进增强”观点则认为应关注于内容本身。</p>
<p>内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p>
<p>7.为什么利用多个域名来存储网站资源会更有效？</p>
<p>CDN缓存更方便<br>突破浏览器并发限制<br>节约cookie带宽<br>节约主域名的连接数，优化页面响应速度<br>防止不必要的安全问题</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1.你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?</p>
<p>IE: trident内核<br>Firefox：gecko 内核<br>Safari:webkit内核<br>Opera:以前是presto内核，Opera现已改用Google Chrome的B]]>
    </summary>
    
      <category term="前端开发" scheme="http://hugzh.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[文件上传插件Uploadify的简单介绍]]></title>
    <link href="http://hugzh.github.io/2014/10/01/uploadyfy-introduce/"/>
    <id>http://hugzh.github.io/2014/10/01/uploadyfy-introduce/</id>
    <published>2014-09-30T16:00:00.000Z</published>
    <updated>2015-08-13T15:39:07.051Z</updated>
    <content type="html"><![CDATA[<p>熟悉使用php的人一定会对php文件上传不陌生，多文件上传以及重命名等都是文件上传的重要应用，我在这里介绍一个ajax+jQuery的插件，这个插件比较好的地方就是前端的效果比较炫酷，使用比较简单，大大简化了代码复杂度。uploadify.swf是插件的核心部分，（下载地址:<a href="http://www.uploadify.com/download/）前端的效果主要由jquery.uploadify.js实现，所以这两个文件要包含进前端的源代码。我在这里主要是想介绍前端的接口函数以及php后台里面的文件重命名的技巧。" target="_blank" rel="external">http://www.uploadify.com/download/）前端的效果主要由jquery.uploadify.js实现，所以这两个文件要包含进前端的源代码。我在这里主要是想介绍前端的接口函数以及php后台里面的文件重命名的技巧。</a><br>前端比较简单，主要是文件包含以及文件上传表单和接口函数。需要包含这几个js文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"jquery.min.js"</span> type=<span class="string">"text/javascript"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"jquery.uploadify.min.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>还有就是接口函数:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">'#file_upload'</span>).uploadify(&#123;</span><br><span class="line"><span class="string">'swf'</span> : <span class="string">'uploadify.swf'</span>,</span><br><span class="line"><span class="string">'uploader'</span> : <span class="string">'uploadify.php'</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>接口函数里面的uploadify()是属于插件uploadify.swf的函数，所以必须先把文件包含进去。<br>前端body部分的代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;&#60;form&#62;&#10;&#60;div id=&#34;queue&#34;&#62;&#60;/div&#62;&#10;&#60;input id=&#34;file_upload&#34; name=&#34;file_upload&#34; type=&#34;file&#34; multiple=&#34;true&#34;&#62;&#10;&#60;/form&#62;</span><br></pre></td></tr></table></figure>
<p>后台部分的php代码比较简单，比较关键的部分就是重命名，根据接口，后台处理函数命名为uploadify.php。由于多文件上传可以在一秒钟之内完成多个文件上传，所以把时间戳作为唯一命名的做法需要注意的地方就是不能把time函数作为字符串，这样会导致字符串相同，如此便没办法上传多个文件，我在这里的解决办法就是使用microtime()生成微秒级的时间，再转化为字符串，这样每个文件的命名就会唯一了。主要代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Define a destination</span></span><br><span class="line"><span class="variable">$targetFolder</span> = <span class="string">'/uploads'</span>; <span class="comment">// Relative to the root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*$verifyToken = md5('unique_salt' . $_POST['timestamp']);*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>) &amp;amp;&amp;amp; <span class="variable">$_POST</span>[<span class="string">'token'</span>] == <span class="variable">$verifyToken</span>) &#123;</span><br><span class="line"><span class="variable">$tempFile</span> = <span class="variable">$_FILES</span>[<span class="string">'Filedata'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line"><span class="variable">$targetPath</span> = <span class="variable">$_SERVER</span>[<span class="string">'DOCUMENT_ROOT'</span>] . <span class="variable">$targetFolder</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*文件以时间戳重命名，这6行代码为个人添加，可以删除，删除之后保持文件原名*/</span></span><br><span class="line"><span class="variable">$date</span> = microtime();<span class="comment">//取得当前时间</span></span><br><span class="line"><span class="variable">$nodot</span> = explode(<span class="string">"."</span>,<span class="variable">$date</span>);<span class="comment">//切割掉 microtime()函数返回数据格式 0.25139300 1138197510中的点</span></span><br><span class="line"><span class="variable">$namestr</span> = str_replace(<span class="string">' '</span>,<span class="string">''</span>,<span class="variable">$nodot</span>[<span class="number">1</span>]);<span class="comment">//去除空格</span></span><br><span class="line"><span class="variable">$uptype</span> = explode(<span class="string">"."</span>, <span class="variable">$_FILES</span>[<span class="string">"Filedata"</span>][<span class="string">"name"</span>]);<span class="comment">//分割留下文件类型</span></span><br><span class="line"><span class="variable">$newname</span> = <span class="variable">$namestr</span>.<span class="string">"."</span>.<span class="variable">$uptype</span>[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">"Filedata"</span>][<span class="string">"name"</span>] = <span class="variable">$newname</span>;<span class="comment">//重命名</span></span><br><span class="line"><span class="variable">$targetFile</span> = rtrim(<span class="variable">$targetPath</span>,<span class="string">'/'</span>).<span class="string">'/'</span>.iconv(<span class="string">"UTF-8"</span>,<span class="string">"GB2312"</span>,<span class="variable">$_FILES</span>[<span class="string">"Filedata"</span>][<span class="string">"name"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validate the file type</span></span><br><span class="line"><span class="variable">$fileTypes</span> = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'jpeg'</span>,<span class="string">'pjpeg'</span>,<span class="string">'gif'</span>,<span class="string">'png'</span>); <span class="comment">// File extensions</span></span><br><span class="line"><span class="variable">$fileParts</span> = pathinfo(<span class="variable">$_FILES</span>[<span class="string">'Filedata'</span>][<span class="string">'name'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$fileParts</span>[<span class="string">'extension'</span>],<span class="variable">$fileTypes</span>)) &#123;</span><br><span class="line">move_uploaded_file(<span class="variable">$tempFile</span>,<span class="variable">$targetFile</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'1'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Invalid file type.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>熟悉使用php的人一定会对php文件上传不陌生，多文件上传以及重命名等都是文件上传的重要应用，我在这里介绍一个ajax+jQuery的插件，这个插件比较好的地方就是前端的效果比较炫酷，使用比较简单，大大简化了代码复杂度。uploadify.swf是插件的核心部分，（下载地址]]>
    </summary>
    
      <category term="javascript" scheme="http://hugzh.github.io/categories/javascript/"/>
    
      <category term="php" scheme="http://hugzh.github.io/categories/javascript/php/"/>
    
      <category term="前端开发" scheme="http://hugzh.github.io/categories/javascript/php/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Php验证码制作]]></title>
    <link href="http://hugzh.github.io/2014/09/17/yanzhengma-php/"/>
    <id>http://hugzh.github.io/2014/09/17/yanzhengma-php/</id>
    <published>2014-09-16T16:00:00.000Z</published>
    <updated>2015-08-11T06:32:11.429Z</updated>
    <content type="html"><![CDATA[<p>关于网页制作中的验证码部分是一个比较有趣的知识点，验证码的制作主要是基于PHP的图片处理拓展功能。 验证码制作的一般流程是：<br>1、创建验证码显示的底图<br>2、列出所有可能用到的字符内容以及字体颜色<br>3、随机截取部分（4或者5个）字符作为验证码输出<br>4、确定验证码显示的角度以及坐标<br>5、增加干扰元素（点和线条等）<br>6、php输出图片，并在脚本及时地destroy掉图片<br>然后是一个值得注意的地方就是，一般来说验证码不应该出现容易混淆的字符，比如l和1,2和z,0和o等等，这是作为一个开发者从用户体验的角度来说需要注意的地方，另外就是干扰元素的颜色不应该使用鲜艳的颜色，一般来说颜色RGB值在50之后比较稳妥。<br>以下是我的php代码，命名为yanzhengma.php:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`<span class="variable">$image</span> = imagecreatetruecolor(<span class="number">100</span>,<span class="number">30</span>);<span class="comment">//100x30的图片生成</span></span><br><span class="line"><span class="variable">$bgcolor</span> = imagecolorallocate(<span class="variable">$image</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>);<span class="comment">//白色底色</span></span><br><span class="line">imagefill(<span class="variable">$image</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="variable">$bgcolor</span>);`</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存验证码内容便于服务器验证</span></span><br><span class="line"><span class="variable">$capchcode</span>=<span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span>&amp;lt;<span class="number">4</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="variable">$fontsize</span>=<span class="number">12</span>;</span><br><span class="line"><span class="variable">$fontcolor</span> = imagecolorallocate(<span class="variable">$image</span>,rand(<span class="number">0</span>,<span class="number">120</span>),rand(<span class="number">0</span>,<span class="number">120</span>),rand(<span class="number">0</span>,<span class="number">120</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//$fontcotent = rand(0,9);//产生随机数字</span></span><br><span class="line"><span class="variable">$data</span> = <span class="string">'ABCDEHJKYSWTRabcdefghjkmnpqstuwsy23456789'</span>;</span><br><span class="line"><span class="variable">$fontcotent</span> = substr(<span class="variable">$data</span>,rand(<span class="number">0</span>,strlen(<span class="variable">$data</span>)),<span class="number">1</span>);<span class="comment">//随机截取一个字符</span></span><br><span class="line"><span class="variable">$capchcode</span> .= <span class="variable">$fontcotent</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = (<span class="variable">$i</span>*<span class="number">100</span>/<span class="number">4</span>)+rand(<span class="number">5</span>,<span class="number">10</span>);<span class="comment">//定义内容的x坐标、y坐标，随机</span></span><br><span class="line"><span class="variable">$y</span> = rand(<span class="number">5</span>,<span class="number">12</span>);</span><br><span class="line">imagestring(<span class="variable">$image</span>,<span class="variable">$fontsize</span>,<span class="variable">$x</span>,<span class="variable">$y</span>,<span class="variable">$fontcotent</span>,<span class="variable">$fontcolor</span>);<span class="comment">//产生字符送到图片</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">'authcode'</span>] = <span class="variable">$capchcode</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加点干扰元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span>&amp;lt;<span class="number">300</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="variable">$pointcolor</span> = imagecolorallocate(<span class="variable">$image</span>,rand(<span class="number">50</span>,<span class="number">200</span>),rand(<span class="number">50</span>,<span class="number">200</span>),rand(<span class="number">50</span>,<span class="number">200</span>));</span><br><span class="line">imagesetpixel(<span class="variable">$image</span>,rand(<span class="number">1</span>,<span class="number">99</span>),rand(<span class="number">1</span>,<span class="number">29</span>),<span class="variable">$pointcolor</span>);<span class="comment">//点元素分布</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加线条干扰</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span>&amp;lt;<span class="number">3</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="variable">$linecolor</span> = imagecolorallocate(<span class="variable">$image</span>,rand(<span class="number">80</span>,<span class="number">220</span>),rand(<span class="number">80</span>,<span class="number">220</span>),rand(<span class="number">80</span>,<span class="number">220</span>));</span><br><span class="line">imageline(<span class="variable">$image</span>,rand(<span class="number">1</span>,<span class="number">99</span>),rand(<span class="number">1</span>,<span class="number">29</span>),rand(<span class="number">1</span>,<span class="number">99</span>),rand(<span class="number">1</span>,<span class="number">29</span>),<span class="variable">$linecolor</span>);<span class="comment">//线条元素分布,两点确定一条直线</span></span><br><span class="line">&#125;</span><br><span class="line">header(<span class="string">'content-type:image/png'</span>);</span><br><span class="line">imagepng(<span class="variable">$image</span>);</span><br><span class="line">imagedestroy(<span class="variable">$image</span>);</span><br></pre></td></tr></table></figure>
<p>总的来说，简单验证码的制作并不难，如果要做一些gif类型的验证码或者一些更加个性化的验证码就需要多花费一些时间去查找相关资料了，这里不做介绍。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于网页制作中的验证码部分是一个比较有趣的知识点，验证码的制作主要是基于PHP的图片处理拓展功能。 验证码制作的一般流程是：<br>1、创建验证码显示的底图<br>2、列出所有可能用到的字符内容以及字体颜色<br>3、随机截取部分（4或者5个）字符作为验证码输出<br>4、]]>
    </summary>
    
      <category term="php" scheme="http://hugzh.github.io/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Haskell初接触感悟]]></title>
    <link href="http://hugzh.github.io/2014/09/03/haskell-introduce/"/>
    <id>http://hugzh.github.io/2014/09/03/haskell-introduce/</id>
    <published>2014-09-02T16:00:00.000Z</published>
    <updated>2015-08-13T15:31:32.569Z</updated>
    <content type="html"><![CDATA[<p>最近选修函数程序设计这门选修课，初步接触到函数式编程语言 Haskell 的思想，在学习的过程中有意识地拿它跟Python去做一些比较，发现两者之间在元组Tuple以及List这种灵活数据类型上面有比较大的接近。但是在设计思想以及语法上面，两者又存在较大差别。先说说Haskell语言是什么东西：<br>Haskell 是一门纯函数式编程语言 (purely functional programming language)。在命令式语言中执行操作需要给电脑安排一组命令，随着命令的执行，状态就会随之发生改变。例如你指派变量 a 的值为 5，而随后做了其它一些事情之后 a 就可能变成的其它值。有控制流程 (control flow)，你就可以重复执行操作。然而在纯函数式编程语言中，你不是像命令式语言那样命令电脑“要做什么”，而是通过用函数来描述出问题“是什么”，如“阶乘是指从1到某个数的乘积”，”一个串列中数字的和”是指把第一个数字跟剩余数字的和相加。你用宣告函数是什么的形式来写程序。另外，变量 (variable) 一旦被指定，就不可以更改了，你已经说了 a 就是 5，就不能再另说 a 是别的什么数。（译注：其实用 variable 来表达造成字义的 overloading，会让人联想到 imperative languages 中 variable 是代表状态，但在 functional languages 中 variable 是相近于数学中使用的 variable。x=5 代表 x 就是 5，不是说 x 在 5 这个状态。) 所以说，在纯函数式编程语言中的函数能做的唯一事情就是利用引数计算结果，不会产生所谓的”副作用 (side effect)” (译注：也就是改变非函数内部的状态，像是 imperative languages 里面动到 global variable 就是 side effect)。一开始会觉得这限制很大，不过这也是他的优点所在：若以同样的参数调用同一个函数两次，得到的结果一定是相同。这被称作“引用透明 (Referential Transparency)” (译注：这就跟数学上函数的使用一样)。如此一来编译器就可以理解程序的行为，你也很容易就能验证一个函数的正确性，继而可以将一些简单的函数组合成更复杂的函数。(来源:《Learn You a Haskell For Great Good》)也就是说，面向对象或者基于过程的程序设计语言和函数式编程语言是存在本质区别的。<br>Haskell语言有什么特点呢，要记的特点（或者说优势）还是比较多的，这里介绍一两个我刚刚理解的方面。第一，灵活的数据结构——List和Tuple，关于这两种数据结构是有比较多的内建函数需要去掌握的，比如：head 返回一个 List 的头部，也就是 List 的首个元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&amp;gt; head [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>`；又比如：take 返回一个 List 的前几个元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&amp;gt; take <span class="number">3</span> [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&amp;gt; take <span class="number">1</span> [<span class="number">3</span>,<span class="number">9</span>,<span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&amp;gt; take <span class="number">5</span> [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="title">ghci</span>&amp;gt; take <span class="number">0</span> [<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>
<p>在这里我想要分享的是关于模式匹配这一章，模式匹配是Haskell最大的特点之一，也是学习Haskell的最大难点之一（个人感觉，目前还没有完全搞懂）。<br>函数的模式匹配在递归函数的运用还是比较多的，除了一种显示的匹配（类似于C语言里面的CASE）如下：</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title">sayMe</span> :: (<span class="type">Integral</span> a) =&amp;gt; a -&amp;gt; <span class="type">String</span></span><br><span class="line"><span class="title">sayMe</span> <span class="number">1</span> = <span class="string">"One!"</span></span><br><span class="line"><span class="title">sayMe</span> <span class="number">2</span> = <span class="string">"Two!"</span></span><br><span class="line"><span class="title">sayMe</span> <span class="number">3</span> = <span class="string">"Three!"</span></span><br><span class="line"><span class="title">sayMe</span> <span class="number">4</span> = <span class="string">"Four!"</span></span><br><span class="line"><span class="title">sayMe</span> <span class="number">5</span> = <span class="string">"Five!"</span></span><br><span class="line"><span class="title">sayMe</span> x = <span class="string">"Not between 1 and 5"</span></span><br></pre></td></tr></table></figure>
<p>除此之外，比较有用的模式匹配就是x:xs这种模式，这在函数递归里面非常重要。而函数递归有事Haskell的核心内容，因此，模式匹配也就是Haskell的核心内容。以下是一个递归求和的例子</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;sum' [] = <span class="number">0</span></span><br><span class="line"><span class="title">sum'</span> (x:xs) = x + sum' xs&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>在这段代码里面，现匹配列表为空的情况，余下的情况，提取出列表头部x，x加上余下列表的递归sum’函数，这样就会一直把列表里面的元素相加，知道列表为空，也就是边界条件。这就是模式匹配在函数递归里面的简单应用。至于更强大的函数功能，大家可以参考网上教程<a href="http://learnyouahaskell-zh-tw.csie.org/zh-cn/chapters.html" target="_blank" rel="external">http://learnyouahaskell-zh-tw.csie.org/zh-cn/chapters.html</a> 去更深入的学习Haskell的精髓。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近选修函数程序设计这门选修课，初步接触到函数式编程语言 Haskell 的思想，在学习的过程中有意识地拿它跟Python去做一些比较，发现两者之间在元组Tuple以及List这种灵活数据类型上面有比较大的接近。但是在设计思想以及语法上面，两者又存在较大差别。先说说Hask]]>
    </summary>
    
      <category term="其它" scheme="http://hugzh.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
</feed>
